[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 6,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "class player: # Ainda não dei uma funcionalidade pra esse classe.. mas logo mais ela tera, usando a função de randomizar nome e classe\n    def __init__(self, nome, sobrenome, classe):\n        self.nome = nome\n        self.sobrenome = sobrenome\n        self.classe = classe\nclass Equipamento: # A classe mais importante do projeto, contendo dentro dela as hierarquias relacionadas as classes, como: armamento, dano, tipo\n    def __init__(self, classe):\n        self.arma = ''\n        self.dano = 0\n        self.tipo = ''",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "Equipamento",
        "kind": 6,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "class Equipamento: # A classe mais importante do projeto, contendo dentro dela as hierarquias relacionadas as classes, como: armamento, dano, tipo\n    def __init__(self, classe):\n        self.arma = ''\n        self.dano = 0\n        self.tipo = ''\n        self.classe = classe\n    def armamento(self): # Dentro desse escopo, temos as condicionais que armazenam os resultados inerentes a cada classe\n        if self.classe == 'Patrulheiro':\n            self.arma = 'Arco e Flecha'\n            self.dano = random.randint(10, 30)",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "AleatorizarNome",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def AleatorizarNome(): # Uma simples função que contém uma variável armazenando uma lista, que é embaralhada e tem um resultado selecionado, algoritmo simples e eficaz, graças a biblioteca \"Random\"\n    listaNome = ['Tolric', 'HewFrith', 'Badic', 'Marmafrea', 'Egar', 'Thascas','Isenhal', 'Drax', 'Richethel', 'Bryt', 'Pabrand', 'Wenledryt']\n    randomiName = random.choice(listaNome)\n    return randomiName\ndef AleatorizarSobrenome(): # Uma simples função que contém uma variável armazenando uma lista, que é embaralhada e tem um resultado selecionado, algoritmo simples e eficaz, graças a biblioteca \"Random\"\n    listaNome = ['Tolric', 'HewFrith', 'Badic', 'Marmafrea', 'Egar', 'Thascas','Isenhal', 'Drax', 'Richethel', 'Bryt', 'Pabrand', 'Wenledryt']\n    randomiSobrename = random.choice(listaNome)\n    return randomiSobrename\ndef AleatorizarClasse(): # A mesma ideia, porém com classes ao invés de nomes, também parte crucial do esqueleto do sistema\n    listaClasse = ['Patrulheiro', 'Feiticeiro', 'Ladino', 'Guerreiro']",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "AleatorizarSobrenome",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def AleatorizarSobrenome(): # Uma simples função que contém uma variável armazenando uma lista, que é embaralhada e tem um resultado selecionado, algoritmo simples e eficaz, graças a biblioteca \"Random\"\n    listaNome = ['Tolric', 'HewFrith', 'Badic', 'Marmafrea', 'Egar', 'Thascas','Isenhal', 'Drax', 'Richethel', 'Bryt', 'Pabrand', 'Wenledryt']\n    randomiSobrename = random.choice(listaNome)\n    return randomiSobrename\ndef AleatorizarClasse(): # A mesma ideia, porém com classes ao invés de nomes, também parte crucial do esqueleto do sistema\n    listaClasse = ['Patrulheiro', 'Feiticeiro', 'Ladino', 'Guerreiro']\n    randomiClasse = random.choice(listaClasse)\n    return randomiClasse\ndef main(): # Função principal, responsável por ser o epicentro de todo o código, basicamente reunindo tudo para compilação final\n    print('=' * 50) ",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "AleatorizarClasse",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def AleatorizarClasse(): # A mesma ideia, porém com classes ao invés de nomes, também parte crucial do esqueleto do sistema\n    listaClasse = ['Patrulheiro', 'Feiticeiro', 'Ladino', 'Guerreiro']\n    randomiClasse = random.choice(listaClasse)\n    return randomiClasse\ndef main(): # Função principal, responsável por ser o epicentro de todo o código, basicamente reunindo tudo para compilação final\n    print('=' * 50) \n    title = 'GERADOR DE HEROI RPG'\n    print(f'{title:=^50}'.format(title))\n    print('=' * 50)\n    nome = AleatorizarNome() # fase de declaração de variáveis que armazenam retornos ",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main(): # Função principal, responsável por ser o epicentro de todo o código, basicamente reunindo tudo para compilação final\n    print('=' * 50) \n    title = 'GERADOR DE HEROI RPG'\n    print(f'{title:=^50}'.format(title))\n    print('=' * 50)\n    nome = AleatorizarNome() # fase de declaração de variáveis que armazenam retornos \n    classe = AleatorizarClasse() # fase de declaração de variáveis que armazenam retornos \n    sobrenome = AleatorizarSobrenome() # fase de declaração de variáveis que armazenam retornos \n    player_equipaments = Equipamento(classe) # fase de execução dos métodos para armazenar os dados\n    player_equipaments.armamento() # fase de execução dos métodos para armazenar os dados",
        "detail": "src.main",
        "documentation": {}
    }
]